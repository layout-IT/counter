{"version":3,"sources":["App.module.css","bll/reduser.tsx","Counter.tsx","App.tsx","reportWebVitals.ts","bll/store.tsx","index.tsx"],"names":["module","exports","initialState","value","maxValue","startValue","text","Counter","props","dispatch","useDispatch","useSelector","state","counterReduser","className","s","wrapper","left","window","top_string","max_value","arrowRed","arrow","top_arrow","onClick","type","bottom_arrow","position_B","position_A","bottom_string","window_button","unSet","set","right","red","title","obert","items","inc","op","addNumber","reset","opasity","App","resetAc","addStartValueToInc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reduser","combineReducers","action","copyState","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dea91813.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1Ub_9\",\"right\":\"App_right__1_PuZ\",\"title\":\"App_title__2sWU3\",\"obert\":\"App_obert__3btd9\",\"items\":\"App_items__1e26s\",\"inc\":\"App_inc__1jHDf\",\"reset\":\"App_reset__1IH0T\",\"red\":\"App_red__CXznE\",\"op\":\"App_op__1FV5v\",\"opasity\":\"App_opasity__1w1Dp\",\"left\":\"App_left__1fxuU\",\"window\":\"App_window__LvrWS\",\"window_button\":\"App_window_button__2GH7Y\",\"set\":\"App_set__x7yTC\",\"unSet\":\"App_unSet__2-9TK\",\"max_value\":\"App_max_value__2QWxY\",\"arrowRed\":\"App_arrowRed__1wnAG\",\"bottom_arrow\":\"App_bottom_arrow__3sqDd\",\"top_arrow\":\"App_top_arrow__SpAvp\",\"arrow\":\"App_arrow__2PytX\",\"position_A\":\"App_position_A__3qUO1\",\"position_B\":\"App_position_B__2lDJc\"};","import {log} from \"util\";\r\n\r\nexport const initialState = {\r\n    value: 0,\r\n    maxValue: 0,\r\n    startValue: 0,\r\n    text: false\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\nexport type valueActionT = ReturnType<typeof addNumberAc>\r\nexport type resetActionT = ReturnType<typeof resetAc>\r\nexport type addStartValueToIncAT = ReturnType<typeof addStartValueToIncAC>\r\nexport type maxValueUpAT = ReturnType<typeof maxValueUpAC>\r\nexport type maxValueDownAT = ReturnType<typeof maxValueDownAC>\r\nexport type startValueDownAT = ReturnType<typeof startValueDownAC>\r\nexport type startValueUpAT = ReturnType<typeof startValueUpAC>\r\nexport type setButtonAT = ReturnType<typeof setButtonAC>\r\n\r\ntype ReduserActionType = valueActionT |\r\n    resetActionT |\r\n    addStartValueToIncAT |\r\n    maxValueUpAT |\r\n    maxValueDownAT |\r\n    startValueDownAT |\r\n    startValueUpAT |\r\n    setButtonAT\r\n\r\n\r\nexport function counterReduser(state: initialStateType = initialState, action: ReduserActionType): initialStateType {\r\n    switch (action.type) {\r\n        case \"ADD-NUNBER\" :\r\n            let copyState = {...state}\r\n            return {...copyState, value: copyState.value + 1}\r\n        case \"RESET\" : {\r\n            let copyState = {...state}\r\n            if (state.value > 0) {\r\n                return {...copyState, value: copyState.value = copyState.startValue}\r\n            }\r\n            return copyState\r\n        }\r\n        case 'ADD-STAR-VALUE-TO-INC' : {\r\n            let copyState = {...state}\r\n            if (copyState.startValue >= 0) {\r\n                return {...copyState, value: copyState.value = copyState.startValue, }\r\n            }\r\n\r\n            return copyState\r\n        }\r\n        case \"MAX-VALUE-UP\" : {\r\n            let copyState = {...state}\r\n            return {...copyState, maxValue: state.maxValue + 1, text: copyState.text = false}\r\n        }\r\n        case \"MAX-VALUE-DOWN\" : {\r\n            let copyState = {...state}\r\n            if (copyState.maxValue - 1 > (copyState.startValue)) {\r\n                return {...copyState, maxValue: copyState.maxValue - 1, text: copyState.text = false}\r\n\r\n            }\r\n            return copyState\r\n        }\r\n        case \"START-VALUE-UP\" : {\r\n            let copyState = {...state}\r\n            if (copyState.maxValue > copyState.startValue + 1) {\r\n                return {...copyState, startValue: copyState.startValue + 1,text: copyState.text = false}\r\n\r\n            }\r\n            return copyState\r\n        }\r\n        case \"START-VALUE-DOWN\" : {\r\n            let copyState = {...state}\r\n            if (copyState.maxValue > (copyState.startValue) - 1) {\r\n                return {...copyState, startValue: copyState.startValue - 1, text: copyState.text = false}\r\n\r\n            }\r\n            return copyState\r\n        }\r\n        case \"SET-BUTTON\" : {\r\n            let copyState = {...state}\r\n            return {...copyState, text : copyState.text = true, value: copyState.value = copyState.startValue }\r\n        }\r\n\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addNumberAc = () => {\r\n    return {\r\n        type: \"ADD-NUNBER\"\r\n    } as const\r\n}\r\nexport const resetAc = (startValue: number) => {\r\n    return {\r\n        type: \"RESET\",\r\n        startValue\r\n    } as const\r\n}\r\nexport const addStartValueToIncAC = (startValue: number) => {\r\n    return {\r\n        type: \"ADD-STAR-VALUE-TO-INC\",\r\n        startValue\r\n    } as const\r\n}\r\nexport const maxValueUpAC = () => {\r\n    return {\r\n        type: 'MAX-VALUE-UP'\r\n    } as const\r\n}\r\nexport const maxValueDownAC = () => {\r\n    return {\r\n        type: 'MAX-VALUE-DOWN'\r\n    } as const\r\n}\r\nexport const startValueDownAC = () => {\r\n    return {\r\n        type: 'START-VALUE-DOWN'\r\n    } as const\r\n}\r\nexport const startValueUpAC = () => {\r\n    return {\r\n        type: 'START-VALUE-UP'\r\n    } as const\r\n}\r\nexport const setButtonAC = () => {\r\n    return {\r\n        type: 'SET-BUTTON'\r\n    } as const\r\n}","import s from './App.module.css'\r\nimport {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {maxValueDownAC, maxValueUpAC, setButtonAC, startValueDownAC, startValueUpAC} from \"./bll/reduser\";\r\nimport {appStateType} from \"./bll/store\";\r\n\r\n\r\nexport type CounterType = {\r\ntext: boolean\r\n    state: number\r\n    addNumber: () => void\r\n    reset: (startValue: number) => void\r\n    addStartValueToInc: (startValue: number) => void\r\n    maxValue: number\r\n}\r\n\r\nexport const Counter = (props: CounterType) => {\r\n    const dispatch = useDispatch()\r\n    const maxValue = props.maxValue\r\n    const startValue = useSelector<appStateType, number>(state => state.counterReduser.startValue)\r\n    const text = props.text\r\n\r\n    // let [maxValue, setmaxValue] = useState(0)\r\n    // let [startValue, setstartValue] = useState(0)\r\n    // let [text, setText] = useState(false)\r\n\r\n    // useEffect(() => {\r\n    //     let valueAsString = localStorage.getItem('startValue')\r\n    //     if (valueAsString) {\r\n    //         let newValue = JSON.parse(valueAsString)\r\n    //         setstartValue(newValue)\r\n    //     }\r\n    // }, [])\r\n    // useEffect(() => {\r\n    //     let valueAsString = localStorage.getItem('maxValue')\r\n    //     if (valueAsString) {\r\n    //         let newValue = JSON.parse(valueAsString)\r\n    //         setmaxValue(newValue)\r\n    //     }\r\n    // }, [])\r\n    //\r\n    //\r\n    // const locStorValue = () => {\r\n    //     localStorage.setItem('maxValue', maxValue.toString())\r\n    //     localStorage.setItem('startValue', startValue.toString())\r\n    // }\r\n\r\n\r\n    const maxValueUp = () => {\r\n        dispatch(maxValueUpAC())\r\n    }\r\n    const maxValueDown = () => {\r\n        dispatch(maxValueDownAC())\r\n        // if (maxValue - 1 > startValue) {\r\n        //     setmaxValue(maxValue - 1)\r\n        //     setText(true)\r\n        // }\r\n    }\r\n\r\n    const startValueUp = () => {\r\n        dispatch(startValueUpAC())\r\n        // if (maxValue > (startValue + 1)) {\r\n        //     setstartValue(startValue + 1)\r\n        //     setText(true)\r\n        // }\r\n\r\n    }\r\n    const startValueDown = () => {\r\n        dispatch(startValueDownAC())\r\n\r\n        // if (maxValue > (startValue - 1)) {\r\n        //     setstartValue(startValue - 1)\r\n        //     setText(true)\r\n        // }\r\n    }\r\n\r\n\r\n    const setButton = () => {\r\n        if (startValue >=0){\r\n            dispatch(setButtonAC())\r\n        }\r\n\r\n         // setText(false)\r\n         // props.addStartValueToInc(startValue)\r\n\r\n        // locStorValue()\r\n    }\r\n\r\n    return <div className={s.wrapper}>\r\n\r\n        <div className={s.left}>\r\n            <div className={s.window}>\r\n                <div className={s.top_string}>\r\n                    <div className={s.max_value}> max value:\r\n                        <div className={maxValue < 0 ? s.arrowRed : s.arrow}>\r\n                            <span className={s.top_arrow} onClick={maxValueUp}></span>\r\n                            <span className={s.bottom_arrow} onClick={maxValueDown}></span>\r\n                            <span className={maxValue < 0 ? s.position_B : s.position_A}>{maxValue}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={s.bottom_string}>\r\n                    <div className={s.max_value}> start value:\r\n                        <div className={startValue < 0 ? s.arrowRed : s.arrow}>\r\n                            <span className={s.top_arrow} onClick={startValueUp}></span>\r\n                            <span className={s.bottom_arrow} onClick={startValueDown}></span>\r\n                            <span className={startValue < 0 ? s.position_B : s.position_A}>{startValue}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.window_button}>\r\n                <button className={startValue < 0 || maxValue < 0 ? s.unSet : s.set} onClick={setButton}>set</button>\r\n            </div>\r\n\r\n        </div>\r\n        <div className={s.right}>\r\n            <div\r\n\r\n                className={props.state === maxValue && maxValue !== 0 && text ? s.red : s.title}>{!text && startValue < 0 ? 'negative value ' : !text ? \"click on the 'set'\" : props.state}</div>\r\n            <div className={s.obert}>\r\n                <div className={s.items}>\r\n                    <button className={props.state > -1 && text ? s.inc : s.op} onClick={() => {props.addNumber()\r\n                    }}>inc\r\n                    </button>\r\n                    <button className={props.state !== startValue && startValue > -1 && text ? s.reset : s.opasity}\r\n                            onClick={() => {\r\n                                props.reset(startValue)\r\n                            }}>reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React   from 'react';\nimport './App.module.css';\nimport {Counter} from \"./Counter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addNumberAc, resetAc,} from \"./bll/reduser\";\nimport {appStateType} from \"./bll/store\";\n\nfunction App() {\n\n    let value = useSelector<appStateType, number >(state => state.counterReduser.value)\n    const text = useSelector<appStateType, boolean>(state => state.counterReduser.text)\n    let maxValue = useSelector<appStateType, number >(state => state.counterReduser.maxValue)\n    let dispatch = useDispatch()\n\n\n     const addNumber = () => {\n        if (text &&  maxValue >value){\n            dispatch(addNumberAc())\n        }\n\n    }\n\n\n    const reset = (startValue: number) => {\n        if (text){\n            dispatch(resetAc(startValue))\n        }\n\n    }\n\n    const addStartValueToInc = (startValue: number) => {\n        dispatch(addStartValueToInc(startValue))\n        // if (startValue >= 0) {\n        //     value = startValue\n        //     setState(value)\n        // }\n\n}\n\n    return (\n        <div className=\"App\">\n            <Counter\n                state ={value}\n                 reset={reset}\n                text={text}\n                 addNumber={addNumber}\n                 addStartValueToInc={addStartValueToInc}\n                maxValue={maxValue}\n\n\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReduser} from \"./reduser\";\r\n\r\n\r\nlet reduser = combineReducers({\r\n\r\n    counterReduser\r\n})\r\n\r\nexport type appStateType = ReturnType<typeof reduser>\r\n\r\nexport let store = createStore(reduser)\r\n\r\nexport type appStoreType = typeof store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport { store } from './bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}